//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace English2.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ttAnhNguEntities : DbContext
    {
        public ttAnhNguEntities()
            : base("name=ttAnhNguEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<tt_bangDiem> tt_bangDiem { get; set; }
        public virtual DbSet<tt_caHoc> tt_caHoc { get; set; }
        public virtual DbSet<tt_chiNhanh> tt_chiNhanh { get; set; }
        public virtual DbSet<tt_chiTien> tt_chiTien { get; set; }
        public virtual DbSet<tt_chuongTrinh> tt_chuongTrinh { get; set; }
        public virtual DbSet<tt_ctBangDiem> tt_ctBangDiem { get; set; }
        public virtual DbSet<tt_ctChuongTrinh> tt_ctChuongTrinh { get; set; }
        public virtual DbSet<tt_dangKyGD> tt_dangKyGD { get; set; }
        public virtual DbSet<tt_danhGiaHS> tt_danhGiaHS { get; set; }
        public virtual DbSet<tt_diemDanh> tt_diemDanh { get; set; }
        public virtual DbSet<tt_dongHP> tt_dongHP { get; set; }
        public virtual DbSet<tt_donTu> tt_donTu { get; set; }
        public virtual DbSet<tt_dsGiaoVienLop> tt_dsGiaoVienLop { get; set; }
        public virtual DbSet<tt_dsLop> tt_dsLop { get; set; }
        public virtual DbSet<tt_hocSinh> tt_hocSinh { get; set; }
        public virtual DbSet<tt_hocSinhTuVan> tt_hocSinhTuVan { get; set; }
        public virtual DbSet<tt_khoaHoc> tt_khoaHoc { get; set; }
        public virtual DbSet<tt_kqLamBai> tt_kqLamBai { get; set; }
        public virtual DbSet<tt_lichHoc> tt_lichHoc { get; set; }
        public virtual DbSet<tt_lopHoc> tt_lopHoc { get; set; }
        public virtual DbSet<tt_monHoc> tt_monHoc { get; set; }
        public virtual DbSet<tt_ngayNghi> tt_ngayNghi { get; set; }
        public virtual DbSet<tt_nhatKyGD> tt_nhatKyGD { get; set; }
        public virtual DbSet<tt_phongBan> tt_phongBan { get; set; }
        public virtual DbSet<tt_phongHoc> tt_phongHoc { get; set; }
        public virtual DbSet<tt_qhHocSinh> tt_qhHocSinh { get; set; }
        public virtual DbSet<tt_settings> tt_settings { get; set; }
        public virtual DbSet<tt_taiKhoan> tt_taiKhoan { get; set; }
        public virtual DbSet<tt_thanhVien> tt_thanhVien { get; set; }
        public virtual DbSet<tt_thuTien> tt_thuTien { get; set; }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    }
}
